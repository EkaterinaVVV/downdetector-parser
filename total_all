from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import time
import pytz
from datetime import datetime
import pandas as pd

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: –∫–ª—é—á ‚Äî URL-—á–∞—Å—Ç—å, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è
services = {
    "sberbank": "–°–±–µ—Ä–±–∞–Ω–∫",
    "telegram": "–¢–µ–ª–µ–≥—Ä–∞–º",
    "whatsapp": "–í–∞—Ç—Å–∞–ø–ø",
    "vkontakte": "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
    "tiktok": "–¢–∏–∫–¢–æ–∫",
    "tbank": "–¢-–±–∞–Ω–∫",
    "bank-vtb": "–í–¢–ë –ë–∞–Ω–∫",
    "ozon": "Ozon",
    "wildberries": "Wildberries",
    "mts": "–ú–¢–°",
    "bilajn": "–ë–∏–ª–∞–π–Ω",
    "megafon": "–ú–µ–≥–∞—Ñ–æ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
options = Options()
options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--window-size=1920,1080")
options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/127.0.0.0 Safari/537.36")

# –ó–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
europe_moscow = pytz.timezone("Europe/Moscow")
all_data = []

# –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
for slug, name in services.items():
    try:
        url = f"https://downdetector.info/{slug}"
        print(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ {name}...")

        driver.get(url)
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "canvas")))
        time.sleep(2)

        chart_data = driver.execute_script("""
        const canvas = document.querySelector('canvas');
        if (canvas) {
            const chart = Chart.getChart(canvas);
            if (chart) {
                return {
                    labels: chart.data.labels,
                    datasets: chart.data.datasets.map(ds => ({
                        label: ds.label,
                        data: ds.data
                    }))
                };
            }
        }
        return null;
        """)

        if chart_data:
            for complaints_point in chart_data["datasets"][0]["data"]:
                timestamp_ms = complaints_point["x"]
                dt_utc = datetime.fromtimestamp(timestamp_ms / 1000, tz=pytz.UTC)
                dt_local = dt_utc.astimezone(europe_moscow)
                all_data.append({
                    "–î–∞—Ç–∞": dt_local.strftime("%Y-%m-%d %H:%M:%S"),
                    "–°–µ—Ä–≤–∏—Å": name,
                    "–ñ–∞–ª–æ–±—ã –≤ —á–∞—Å": complaints_point["y"]
                })
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ: {name}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {name}: {e}")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥—Ä–∞–π–≤–µ—Ä–∞
driver.quit()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
df_all = pd.DataFrame(all_data)
df_all.to_csv("total.csv", index=False)
print("\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ all_services_complaints.csv")
df_all.head()
